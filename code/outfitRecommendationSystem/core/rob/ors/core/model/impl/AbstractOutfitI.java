package rob.ors.core.model.impl;


// Generated Jul 13, 2012 11:58:30 AM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import rob.ors.core.model.api.AbstractGarment;
import rob.ors.core.model.api.AbstractOutfit;

import rob.ors.core.model.api.ConcreteOutfit;


/**
 * AbstractOutfit generated by hbm2java
 */
public class AbstractOutfitI extends rob.ors.core.model.impl.OutfitI  implements java.io.Serializable, AbstractOutfit  {
	
	private Set<rob.ors.core.model.api.ConcreteOutfit> outfits;
	private List<rob.ors.core.model.api.AbstractGarment> garments;
	
	
	public AbstractOutfitI()
	{
		outfits = new HashSet<rob.ors.core.model.api.ConcreteOutfit>(0);
		garments = new LinkedList<rob.ors.core.model.api.AbstractGarment>();
		
	}

		
	@Override
	public Set<rob.ors.core.model.api.ConcreteOutfit> getOutfits() {
		return this.outfits;
	}
	
	private void setOutfits(Set<rob.ors.core.model.api.ConcreteOutfit> outfits) {
		this.outfits = outfits;
	}
	
	@Override
	public void addOutfit(rob.ors.core.model.api.ConcreteOutfit outfit)
	{
		if(outfit == null) throw new IllegalArgumentException("Set is null");
		this.outfits.add(outfit);
		outfit.setAbstractoutfit(this);
		
	}

	@Override
	public void removeOutfit(rob.ors.core.model.api.ConcreteOutfit outfit)
	{
		if(outfit == null) throw new IllegalArgumentException("Set is null");
		this.outfits.remove(outfit);
		outfit.setAbstractoutfit(null);
	}

	@Override
	public void addGarment(AbstractGarment garment)
	{	
		if(garment == null) throw new IllegalArgumentException("garment is null");
		this.garments.add(garment);
		garment.getOutfits().add(this);		
	}
	
	@Override
	public void removeGarment(AbstractGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");
		this.garments.remove(garment);
		garment.getOutfits().remove(this);
	}
	
	@Override
	public List<AbstractGarment> getGarments()
	{
		return this.garments;
	}
	
	private void setGarments(List<AbstractGarment> garments)
	{
		if(garments == null )return;
		this.garments = garments;		
	}
	
	@Override
	public Integer getLikes()
	{
		int aux = 0;
		for(ConcreteOutfit outfit:outfits) aux+=outfit.getLikes();
		if(outfits.size()==0)return 0;
		return aux/outfits.size();
	}


	@Override
	public Integer getViews()
	{
		int aux = 0;
		for(ConcreteOutfit outfit:outfits) aux+=outfit.getViews();
		if(outfits.size()==0)return 0;
		return aux/outfits.size();
	}
	
	public void removeReferences()
	{
		for(ConcreteOutfit outfit : getOutfits())removeOutfit(outfit);
		for(AbstractGarment garment: getGarments()) removeGarment(garment);
	}




}

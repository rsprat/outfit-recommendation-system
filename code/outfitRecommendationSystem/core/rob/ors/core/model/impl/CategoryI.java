package rob.ors.core.model.impl;


// Generated Jul 13, 2012 11:58:30 AM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import rob.ors.core.model.api.AbstractGarment;
import rob.ors.core.model.api.Category;
import rob.ors.core.model.api.CompoundCategory;
import rob.ors.core.model.api.ConcreteGarment;
import rob.ors.core.model.api.CategorizationVisitor;
import rob.ors.core.polyvore.PolyvoreCategoryTree;

/**
 * Category generated by hbm2java
 */
public class CategoryI implements java.io.Serializable, Category {

	private Integer id;
	private String name;
	private CompoundCategory parentCategory = null;
	protected Set<ConcreteGarment> garments;
	protected Set<AbstractGarment> abstractGarments;
	
	
	protected CategoryI()
	{
		garments = new HashSet<ConcreteGarment>(0);
		abstractGarments = new HashSet<AbstractGarment>(0);
	}


	public CategoryI(Integer id, String name)
	{
		
		garments = new HashSet<ConcreteGarment>(0);
		abstractGarments = new HashSet<AbstractGarment>(0);
		this.id = id;
		this.name = name;
	}

	
	@Override
	public Integer getId()
	{
		return this.id;
	}

	@Override
	public void setId(Integer id)
	{
		if(id == null) throw new IllegalArgumentException("Id is null");
		this.id = id;
	}

	
	@Override
	public String getName()
	{
		return this.name;
	}


	@Override
	public void setName(String name)
	{
		if(name == null) throw new IllegalArgumentException("Name is null");
		this.name = name;
	}
	
	@Override
	public void setParentCategory(CompoundCategory category) {		
		this.parentCategory = parentCategory;
		category.getSubCategories().add(this);
		
	}

	@Override
	public CompoundCategory getParentCategory() {		
		//The category parent hasn't been outfit already
		if(parentCategory==null && !this.equals(PolyvoreCategoryTree.getCategoryTreeRoot())) parentCategory = PolyvoreCategoryTree.getParent(this);
		return parentCategory;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CategoryI other = (CategoryI) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	
	@Override
	public Set<ConcreteGarment>  getGarments()
	{
		return this.garments;
	}

	private void setGarments(Set<ConcreteGarment>  garments) {
		this.garments = garments;
	}
	
	@Override
	public void addGarment(ConcreteGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");	
		this.garments.add(garment);
		//garment.setCategory(this);	No need for this, garment constructor enforces giving a category
	}
	
	@Override
	public void removeGarment(ConcreteGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");	
		this.garments.remove(garment);			
	}
	
	@Override
	public void addAbstractGarment(AbstractGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");	
		this.abstractGarments.add(garment);
		//garment.setCategory(this);		No need for this, garment constructor enforces giving a category
	}

	@Override
	public void removeAbstractGarment(AbstractGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");	
		this.abstractGarments.remove(garment);
		
	}

	@Override
	public Set<AbstractGarment>  getAbstractGarments()
	{
		return this.abstractGarments;
	}

	private void setAbstractGarments(Set<AbstractGarment>  abstractGarments) {
		this.abstractGarments = abstractGarments;
	}
	
	

	




	@Override
	public void visit(CategorizationVisitor visitor)
	{
		visitor.doVisit(this);				
	}




	

}

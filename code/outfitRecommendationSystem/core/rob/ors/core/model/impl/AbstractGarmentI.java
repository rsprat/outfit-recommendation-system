package rob.ors.core.model.impl;

import java.util.HashSet;
import java.util.Set;

import rob.ors.core.model.api.AbstractGarment;
import rob.ors.core.model.api.AbstractOutfit;
import rob.ors.core.model.api.Category;

import rob.ors.core.model.api.ConcreteGarment;

/**
 * AbstractGarment generated by hbm2java
 */
public class AbstractGarmentI extends GarmentI implements java.io.Serializable, AbstractGarment {

	
	private Set<ConcreteGarment> garments ;
	private Set<AbstractOutfit> outfits;
	protected AbstractGarmentI()
	{
	
	}

	public AbstractGarmentI(Category category) {
		super(category);
		garments = new HashSet<ConcreteGarment>(0);
		outfits = new HashSet<AbstractOutfit>(0);
		category.getAbstractGarments().add(this);
	}
	
	private void setCategory(Category category)
	{		
		this.category = category;
		//category.getAbstractGarments().add(this);
	}
	
	@Override
	public Set<ConcreteGarment>  getGarments() {
		return this.garments;
	}


	private void setGarments(Set<ConcreteGarment>  garments) {
		this.garments = garments;
	}
	
	@Override
	public void addGarment(ConcreteGarment garment)
	{	
		if(garment == null) throw new IllegalArgumentException("garment is null");
		this.garments.add(garment);
		garment.setAbstractgarment(this);
	}
	
	@Override
	public void removeGarment(ConcreteGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");
		this.garments.remove(garment);
		garment.setAbstractgarment(null);
	}


	@Override
	public Set<AbstractOutfit> getOutfits() {		
		return this.outfits;
	}
	
	private void setOutfits( Set<AbstractOutfit> outfits)
	{
		if(outfits == null )return;
		this.outfits= outfits;		
	}

	@Override
	public void addOutfit(AbstractOutfit outfit) {

		if(outfit == null) throw new IllegalArgumentException("AbstractOutfit is null");
		this.outfits.add(outfit);
		outfit.getGarments().add(this);		
	}
	
	@Override
	public void removeOutfit(AbstractOutfit outfit)
	{
		if(outfit == null) throw new IllegalArgumentException("AbstractOutfit is null");
		this.outfits.remove(outfit);
		outfit.getGarments().remove(this);
	}
	
	
	@Override
	public Integer getAge()
	{
		int aux = 0;
		for(ConcreteGarment garment:garments) aux+=garment.getAge();
		if(garments.size()==0)return 0;
		return aux/garments.size();
	}
	@Override
	public Integer getViews()
	{
		int aux = 0;
		for(ConcreteGarment garment:garments) aux+=garment.getViews();
		if(garments.size()==0)return 0;
		return aux/garments.size();
	}
	
	@Override
	public Integer getSaves()
	{
		int aux = 0;
		for(ConcreteGarment garment:garments) aux+=garment.getSaves();
		if(garments.size()==0)return 0;
		return aux/garments.size();
	}
	
	public void removeReferences()
	{
		for(AbstractOutfit outfit: getOutfits()) removeOutfit(outfit);
		for(ConcreteGarment garment: getGarments())removeGarment(garment);
		category.removeAbstractGarment(this);
		category = null;
	}

}


package rob.crs.informationGathering.visualitzation;

import static com.googlecode.javacv.cpp.opencv_core.CV_RGB;
import static com.googlecode.javacv.cpp.opencv_core.cvReleaseImage;
import static com.googlecode.javacv.cpp.opencv_core.cvReleaseMat;
import static com.googlecode.javacv.cpp.opencv_highgui.cvLoadImage;
import static com.googlecode.javacv.cpp.opencv_highgui.cvSaveImage;
import static com.googlecode.javacv.cpp.opencv_core.*;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import javax.imageio.ImageIO;
import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.w3c.dom.css.RGBColor;

import com.googlecode.javacv.cpp.opencv_core.CvMat;
import com.googlecode.javacv.cpp.opencv_core.CvScalar;
import com.googlecode.javacv.cpp.opencv_core.IplImage;

import rob.crs.core.config.ConfigReader;
import rob.crs.core.model.api.AbstractItem;
import rob.crs.core.model.api.AbstractSet;
import rob.crs.core.model.api.Category;
import rob.crs.core.model.api.ConcreteItem;
import rob.crs.core.model.api.ConcreteSet;
import rob.crs.core.model.api.DBConnection;
import rob.crs.core.model.impl.CategoryI;
import rob.crs.core.model.impl.ConcreteItemI;
import rob.crs.core.model.impl.Logger;
import rob.crs.core.polyvore.PolyvoreCategoryTree;
import rob.crs.imgfeaturesextraction.FeaturesExtractor;
import rob.crs.imgfeaturesextraction.ItemsComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.BackgroundExtractor;
import rob.crs.imgfeaturesextraction.imageProcessing.ColorComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.CvMatUtils;
import rob.crs.imgfeaturesextraction.imageProcessing.DirectoryReader;
import rob.crs.informationGathering.clustering.CompoundSimilarityFunctionBuilder;
import rob.crs.informationGathering.clustering.CompoundSimilarityMatrix;
import rob.crs.informationGathering.clustering.WidthSimilarityFunction;
import rob.crs.informationGathering.clustering.MySpectralClusterer;
import rob.crs.informationGathering.clustering.SimilarityFunction;
import rob.crs.informationGathering.clustering.SimilarityFunctionBuilder;
import rob.crs.informationGathering.clustering.HistogramSimilarityFunction;
import weka.core.Attribute;

public class ClustersPanel extends JPanel implements ComponentListener, ChangeListener,ActionListener{
	private static final String IMAGES_SRC_PATH = ConfigReader.getAttribute("smallImagesFolder");
	private static final String IMAGES_DST_PATH = ConfigReader.getAttribute("processedImagesFolder");
	private static final DecimalFormat df = new DecimalFormat("#.##");
	private int referenceItemId = 0;
	private JComboBox categoryComboBox;
	Map<String,Integer> categoryMap;
	protected int[] items;
	
	
	int categoryId=3;
	JButton go;
	private int numItems = 20;
	JTextField numItemsField;
	
	private float alpha = 0.6f;
	JTextField alphaField;
	
	private float shapeProportion = 0.5f;
	JTextField shapeProportionField;
	
	
	
	protected CompoundSimilarityMatrix simMatrix;
	protected JScrollPane scroller;
	protected static Image blackImage;

	private CompoundSimilarityFunctionBuilder similarityFunctionBuilder;
	static{
		try {
			blackImage =  ImageIO.read(new File(IMAGES_SRC_PATH+"/black.jpg"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	

	private void initializeCategoryComboBox(){
		DBConnection.transaction();
		
		categoryMap = new HashMap<String,Integer>();
		for(Category cat : PolyvoreCategoryTree.getSubtreeAsSet(0))
		{
			String catName = "";
			Category aux = cat;
			while(aux!=PolyvoreCategoryTree.getCategoryTreeRoot())
			{
				catName = aux.getName()+">"+catName;
				aux=aux.getParentCategory();
			}
			catName+="("+cat.getId()+")";
			categoryMap.put(catName, cat.getId());
		}

		LinkedList cats = new LinkedList<String>(categoryMap.keySet());
		Collections.sort(cats,new Comparator<String>() {

			@Override
			public int compare(String o1, String o2) {
				return o1.compareTo(o2);

			}
		});
		categoryComboBox = new JComboBox(cats.toArray());
	}
	
	public ClustersPanel(CompoundSimilarityFunctionBuilder similarityFunctionBuilder)
	{	
		this.similarityFunctionBuilder = similarityFunctionBuilder;
		
		
		add(new JLabel("Num items"));
		numItemsField = new JTextField(new Integer(numItems).toString());
		add(numItemsField);
		
		add(new JLabel("Alpha"));
		alphaField = new JTextField(new Float(alpha).toString());
		add(alphaField);		
		
		add(new JLabel("ShapeProportion"));
		shapeProportionField = new JTextField(new Float(shapeProportion).toString());
		add(shapeProportionField);		
		
		go = new JButton("Go");
		add(go);
		go.addActionListener(this);

		
		
		initializeCategoryComboBox();
		add(categoryComboBox);
		categoryComboBox.setMaximumSize(new Dimension(500,30));
		categoryComboBox.addActionListener(this);
				
		categoryChanged();		
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
	
		
		

	}
	
	private int[] concatenate (int[] a, int[] b)
	{
		int[] c = new int[a.length+b.length];

		for(int i=0; i<a.length;i++)
		{
			c[i]=a[i];
		}
		for(int i=0;i<b.length;i++)
		{
			c[i+a.length]=b[i];
		}
		return c;
	}
	
	public void removeItem(int i)
	{		
		if(referenceItemId == simMatrix.getItemId(i))referenceItemId= 0;
		if(simMatrix!=null)simMatrix.removeItem(items[i]);
		int[] aux;
		//if(i==0)aux = new int[items.length-1];
		aux = Arrays.copyOf(items, i);		
		
		aux = concatenate(aux,	Arrays.copyOfRange(items,i+1,items.length));
		items=aux;
	}

	private void fillClusterItemsPanels()
	{


		MySpectralClusterer clusterer = new MySpectralClusterer();
		try {
			clusterer.setAlphaStar(alpha);
		} catch (Exception e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		try
		{		
			Logger.log("Start computing sim matrix at "+new Date().toString()+" with "+items.length+" items",Logger.NORMAL);
			Date start = new Date();
			if(simMatrix==null){
				simMatrix = new CompoundSimilarityMatrix(items,similarityFunctionBuilder);			
				System.out.println(simMatrix.getSimilarityMatrix().toString());
			}
		    Logger.log("End computation of sim amtrix, took "+((new Date().getTime()-start.getTime())/1000)+" for "+items.length+" items",Logger.NORMAL);

			clusterer.buildClusterer(items, simMatrix);
		} catch (Exception e1){ e1.printStackTrace();}
	
		int n = 0;
		try 
		{
			n = clusterer.numberOfClusters();
		} catch (Exception e1) {e1.printStackTrace();}
		
		JPanel clustersPanel;
		clustersPanel = new JPanel();
		clustersPanel.setLayout(new GridLayout(1,n));
		
	
		//Initialize the panels
		List<JPanel> clusterItemsPanel = new LinkedList<JPanel>();
		for(int i=0;i<n;i++)
		{
			JPanel panel = new JPanel();
			panel.setLayout(new GridLayout(items.length,1));			
			clusterItemsPanel.add(panel);	
			clustersPanel.add(panel);
		}
		
		
		for( int i = 0; i<items.length;i++)
		{
			final int aux = i;
			int c = 0;
			try {
				c = clusterer.getTrainingInstanceCluster(items[i]);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			JPanel comp = new JPanel();			
			comp.setBorder(BorderFactory.createTitledBorder("Item: "+items[i]));		
			comp.addMouseListener(new MouseListener() {
				
				@Override
				public void mouseReleased(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public void mousePressed(MouseEvent arg0) {
					referenceItemId = items[aux];	
					fillClusterItemsPanels();					
				}
				
				@Override
				public void mouseExited(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public void mouseEntered(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public void mouseClicked(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
			});
			
			JButton b = new JButton();
			b.setSize(5, 5);
			b.setBackground(Color.red);
			b.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					removeItem(aux);
					fillClusterItemsPanels();
					
				}
			});
			comp.add(b);
			String label = "";	
			
			if(referenceItemId!=0)
			{
				label = ""+df.format(simMatrix.getSimilarity(referenceItemId,items[i]))+"\n";
				double[] sim = simMatrix.getSimilarityComponents(referenceItemId,items[i]);
				for(int k=0;k<sim.length;k++)
				{
					double portion = simMatrix.getSimilarityFunctionBuilder().getSimilarityFunctionWeights()[k]*sim[k];
					label+=k+": "+ df.format(portion)+" ("+df.format(sim[k])+")\n";
				}
			}
			BufferedImage itemImage = loadImage(items[i]);
			ImageIcon icon = new ImageIcon( itemImage.getScaledInstance(-1, 75,  java.awt.Image.SCALE_SMOOTH) );
			JLabel imageLabel = new JLabel(convertToMultiline(label),icon,SwingConstants.CENTER);
			imageLabel.setFont(new Font("default", Font.PLAIN, 8));
			comp.add(imageLabel);
		
			clusterItemsPanel.get(c).add(comp);	
			//clustersPanel.add(comp);	
		}
		scroller.getHorizontalScrollBar().getValue();
		int oldHVal = 0;
		int oldVVal = 0;
		if(scroller!=null)
		{
			oldHVal = scroller.getHorizontalScrollBar().getValue();
			oldVVal = scroller.getVerticalScrollBar().getValue();
			remove(scroller);
		}
		scroller = new JScrollPane(clustersPanel); 
		scroller.getHorizontalScrollBar().setValue(oldHVal);
		scroller.getVerticalScrollBar().setValue(oldVVal);
		add(scroller);
		
		revalidate();
		repaint();		
	}

	
	public static String convertToMultiline(String orig)
	{
	    return "<html>" + orig.replaceAll("\n", "<br>");
	}
		
	
//	private BufferedImage loadImage(int itemId)
//	{
//		BufferedImage myPicture = (BufferedImage) blackImage;
//		IplImage itemAux = cvLoadImage(IMAGES_SRC_PATH+itemId+".jpg");
//		CvMat itemImage = CvMatUtils.getCvMatFromIplImage(itemAux);			
//		CvMat itemMask = BackgroundExtractor.colorMask(itemImage,CV_RGB(255,255,255),10);	
//		BufferedImage img = new BufferedImage(itemMask.rows(),itemMask.cols(),BufferedImage.TYPE_INT_BGR);		
//		for(int i=0;i<itemMask.rows();i++)
//		{
//			for(int j=0;j<itemMask.cols();j++)
//			{
//				img.setRGB(j, i,  (int) itemMask.get(i,j));
//			}
//		}
//		cvReleaseImage(itemAux);
//		itemMask.deallocate();
//		return img;
//
//	}
	
	protected BufferedImage loadImage(int itemId)
	{
		BufferedImage myPicture = (BufferedImage) blackImage;
    	try
		{
    	
	    	myPicture = ImageIO.read(new File(ConfigReader.getAttribute("smallImagesFolder")+"/"+itemId+".jpg"));
			
		} catch (IOException e)
		{
		}
    	
    	return myPicture;
	}

	@Override
	public void componentHidden(ComponentEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void componentMoved(ComponentEvent e) {
		// TODO Auto-generated method stubA
		
	}

	@Override
	public void componentResized(ComponentEvent e)
	{
		scroller.setPreferredSize(getSize());
	    revalidate();
	    repaint();
	}

	@Override
	public void componentShown(ComponentEvent e) {
		scroller.setPreferredSize(getSize());
	    revalidate();
	    repaint();		
	}
		
	@Override
	public void stateChanged(ChangeEvent arg0)
	{
	}
	
	

	@Override
	public void actionPerformed(ActionEvent e)
	{
	
		if(e.getSource().equals(categoryComboBox))
		{
			JComboBox cb = (JComboBox)e.getSource();	
			categoryId = categoryMap.get(cb.getSelectedItem());
			categoryChanged();		
		}
		if(e.getSource().equals(go))
		{

			alpha = Float.parseFloat(alphaField.getText());	
			int newNumItems = Integer.parseInt(numItemsField.getText());
			float newSigma = Float.parseFloat(shapeProportionField.getText());	
			
			if(newSigma!=shapeProportion)
			{	
				shapeProportion = newSigma;
				simMatrix.getSimilarityFunctionBuilder().setSimilarityFunctionWeight(new double[]{1-shapeProportion,shapeProportion});				
			}
			
			if(newNumItems!=numItems)
			{
				referenceItemId = 0;
				numItems = newNumItems;
				simMatrix = null;
				items=Arrays.copyOf(selectItems(categoryId),numItems);	
			}
			fillClusterItemsPanels();			
		    revalidate();
		    repaint();	
			
		}
		
		
	}
	
	private static int[] selectItems(int catId)
	{
		List<String> images = DirectoryReader.getFileNames(ConfigReader.getAttribute("smallImagesFolder"), "jpg");		
		List<Integer> itemsWithImage = new LinkedList<Integer>();

		for(String id: images)
		{
			id = id.replace(".jpg", "");
			id = id.replace(".jpeg", "");
			if(!id.equals("black"))itemsWithImage.add(new Integer(id));
		
		}				
		DBConnection.transaction();
		
		List<ConcreteItem> allItems = (List<ConcreteItem>) DBConnection.session().createQuery("from ConcreteItemI where category_id = "+catId).list();
		List<Integer> selectedItems = new LinkedList<Integer>();
		Collections.shuffle(allItems);
		for(ConcreteItem item:allItems)
		{
			if(itemsWithImage.contains(item.getId())) selectedItems.add(item.getId());
				
		}
		
		int []slected = new int[selectedItems.size()];
		for(int i = 0; i<selectedItems.size(); i++) slected[i] = selectedItems.get(i);
		return slected;
	}
	
	private void categoryChanged()
	{
		referenceItemId = 0;
		int[] aux = selectItems(categoryId);
		if(aux.length>numItems)aux=Arrays.copyOf(aux,numItems);
		items = aux;
		simMatrix = null;
		fillClusterItemsPanels();
	    revalidate();
	    repaint();		
	}



	

}


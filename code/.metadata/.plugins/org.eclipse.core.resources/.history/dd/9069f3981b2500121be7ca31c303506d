package rob.crs.imgfeaturesextraction;

import static com.googlecode.javacv.cpp.opencv_core.CV_RGB;
import static com.googlecode.javacv.cpp.opencv_core.cvSet;
import static com.googlecode.javacv.cpp.opencv_highgui.cvLoadImage;
import rob.crs.core.config.ConfigReader;
import rob.crs.core.model.api.DBConnection;
import rob.crs.imgfeaturesextraction.imageProcessing.BackgroundExtractor;
import rob.crs.imgfeaturesextraction.imageProcessing.ColorComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.CvMatUtils;
import rob.crs.imgfeaturesextraction.imageProcessing.NoiseDetection;

import com.googlecode.javacv.cpp.opencv_core.CvMat;
import com.googlecode.javacv.cpp.opencv_core.CvScalar;
import com.googlecode.javacv.cpp.opencv_core.IplImage;

/**
 * Compar
 * @author robert
 *
 */
public class ItemsComparator {
	private static final String IMAGES_SRC_PATH = ConfigReader.getAttribute("smallImagesFolder");
	private static final String IMAGES_DST_PATH = ConfigReader.getAttribute("processedImagesFolder");
	
	public static int similarity(int anItem, int anotherItem)
	{
		
		IplImage anItemImageAux = cvLoadImage(IMAGES_SRC_PATH+anItem+".jpg");
		IplImage anotherItemImageAux = cvLoadImage(IMAGES_SRC_PATH+anotherItem+".jpg");
		
		CvMat anItemImage = CvMatUtils.getCvMatFromIplImage(anItemImageAux);
		CvMat anotherItemImage = CvMatUtils.getCvMatFromIplImage(anotherItemImageAux);

			
		CvMat anItemMask = BackgroundExtractor.colorMask(anItemImage,CV_RGB(255,255,255),10);
		CvMat anotherItemMask = BackgroundExtractor.colorMask(anotherItemImage,CV_RGB(255,255,255),10);
	
		CvMat maskDifference = CvMat.create(anItemMask.rows(),anItemMask.cols()); 
		int difference = maskSimilarity( anItemMask, anotherItemMask,maskDifference);
		//new ImagePrinter(new IplImage(maskDifference)).print(IMAGES_DST_PATH+"dif_"+anItem+"_"+anotherItem+".jpg");
	
		return difference;
	}
	
	public static int maskSimilarity(CvMat anItemMask,CvMat anotherItemMask,CvMat maskDifference)

	{
		cvSet(maskDifference,CV_RGB(255,255,255));
		
		if(anItemMask.rows()!=anotherItemMask.rows()) System.out.println("rows not equal");
		if(anItemMask.cols()!=anotherItemMask.cols()) System.out.println("rows not equal");
		float equalCount = 0;
		for(int y=0; y<anItemMask.rows(); y++)
		{
		    for(int x=0; x<anItemMask.cols(); x++)
		    {		    
		  //System.out.println(CvMatUtils.getMono(anItemMask, y, x)+" "+CvMatUtils.getMono(anotherItemMask, y, x));
		    	if(CvMatUtils.getMono(anItemMask, y, x) == CvMatUtils.getMono(anotherItemMask, y, x))
		    		{
		    		maskDifference.put(y, x,0);
		    		equalCount++;
		    		}
		    }
		}
		return (int) ((equalCount/(float)(anotherItemMask.cols()*anotherItemMask.rows()))*100);
	}
	
	
	
	public static void main(String[] args)
	{

		System.out.println(similarity(49427923,49484527));
		System.out.println(similarity(48104309,49484527));
		System.out.println(similarity(48104309,48104309));
		System.out.println(similarity(48295185,49484527));
	
	}
}

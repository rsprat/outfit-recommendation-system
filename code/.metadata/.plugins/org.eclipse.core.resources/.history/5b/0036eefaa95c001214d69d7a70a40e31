package rob.crs.informationGathering.visualitzation;

import static com.googlecode.javacv.cpp.opencv_core.CV_RGB;
import static com.googlecode.javacv.cpp.opencv_highgui.cvLoadImage;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.hibernate.ScrollableResults;
import org.math.plot.utils.Array;

import com.googlecode.javacv.cpp.opencv_core.CvMat;
import com.googlecode.javacv.cpp.opencv_core.CvScalar;
import com.googlecode.javacv.cpp.opencv_core.IplImage;

import rob.crs.core.config.ConfigReader;
import rob.crs.core.model.api.AbstractItem;
import rob.crs.core.model.api.AbstractSet;
import rob.crs.core.model.api.Category;
import rob.crs.core.model.api.ConcreteItem;
import rob.crs.core.model.api.ConcreteSet;
import rob.crs.core.model.api.DBConnection;
import rob.crs.core.model.impl.ConcreteItemI;
import rob.crs.core.polyvore.PolyvoreCategoryTree;
import rob.crs.imgfeaturesextraction.FeaturesExtractor;
import rob.crs.imgfeaturesextraction.ImagePrinter;
import rob.crs.imgfeaturesextraction.ItemProportionsExtractor;
import rob.crs.imgfeaturesextraction.ItemsComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.BackgroundExtractor;
import rob.crs.imgfeaturesextraction.imageProcessing.ColorComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.CvMatUtils;
import weka.core.Attribute;

public class SuspiciousItemsPanel extends JPanel implements ComponentListener, ChangeListener,ActionListener{
	private static final String IMAGES_SRC_PATH = ConfigReader.getAttribute("smallImagesFolder");
	private static final String BLACKLIST_FILE = ConfigReader.getAttribute("itemsBlackList");
	protected int[] items;
	protected Map<Integer, ImageIcon> itemImageMap;
	protected JPanel concreteItemsPanel;
	protected JScrollPane scroller;
	protected static Image blackImage;
	private static int ITEMS_PER_ROW = 6;
	protected InspectionThread worker;	
	static{
		try {
			System.out.println(ConfigReader.getAttribute("smallImagesFolder"));
			blackImage =  ImageIO.read(new File(ConfigReader.getAttribute("smallImagesFolder")+"black.jpg"));
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

			

	public SuspiciousItemsPanel()
	{	
		itemImageMap = new HashMap<Integer, ImageIcon>();
		items = new int[0];
		worker = new InspectionThread(10){

			@Override
			public void push()
			{
				 workerPush();				
			}
			
		};
		Thread t = new Thread(worker);
		t.start();
		
		concreteItemsPanel = new JPanel();		
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));		
		scroller = new JScrollPane(concreteItemsPanel);  
		add(scroller);
	}
	
	protected void workerPush()
	{
		int[] newItems = worker.pull();
		updateItemsPanel(newItems);
	}
	public void removeItem(int iid)
	{
		storeItemIdInFile(iid);
		int[] aux = Arrays.copyOf(items,items.length);
		boolean found = false;
		int i;
		for(i=0;i<items.length;i++)if(items[i]==iid){ found=true; break;}
		if(found)
		{					
			int[] aux2 = Arrays.copyOf(aux, i);		
			aux2 = concatenate(aux2,	Arrays.copyOfRange(aux,i+1,aux.length));
			items=aux2;
			updateItemsPanel(new int[0]);
		}			
	}
	
	private void storeItemIdInFile(int iid)
	{
			
		try
		{
			FileWriter fw = new FileWriter(BLACKLIST_FILE,true);
			fw.write(iid+System.getProperty("line.separator"));
			fw.close();
		}catch (IOException e)
		{
			e.printStackTrace();
		}
		
		
	}
	private int[] concatenate (int[] a, int[] b)
	{
		int[] c = new int[a.length+b.length];

		for(int i=0; i<a.length;i++)
		{
			c[i]=a[i];
		}
		for(int i=0;i<b.length;i++)
		{
			c[i+a.length]=b[i];
		}
		return c;
	}
	
	public void updateItemsPanel(int[] newItems)
	{
		items= concatenate(items,newItems);
		int numItems = items.length;
		int numRows;
		int numCols;
		if(numItems<ITEMS_PER_ROW)
		{
			numRows = 1;
			numCols = numItems;
			
		}
		else
		{
			numRows = numItems/ITEMS_PER_ROW;
			numCols = ITEMS_PER_ROW;
			if(numItems%ITEMS_PER_ROW!=0)numRows+=1;
		}
		concreteItemsPanel.setLayout(new GridLayout(numRows,numCols));
		loadItemsImages(newItems);
		concreteItemsPanel.removeAll();
		for(final int itemId : items)
		{			
		
			JPanel comp = new JPanel();
			comp.addMouseListener(new MouseListener() {
				
				@Override
				public void mouseReleased(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public void mousePressed(MouseEvent arg0) {
				}
				
				@Override
				public void mouseExited(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public void mouseEntered(MouseEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public void mouseClicked(MouseEvent arg0) {
					removeItem(itemId);
					
				}
			});
			comp.setBorder(BorderFactory.createTitledBorder("Item: "+itemId));			
			ConcreteItem item = null;
			JLabel imageLabel = new JLabel("",itemImageMap.get(itemId),SwingConstants.CENTER);
			imageLabel.setFont(new Font("default", Font.PLAIN, 10));
			comp.add(imageLabel);
			concreteItemsPanel.add(comp);
		}
	     revalidate();
	     repaint();
		
	}
		
	protected void loadItemsImages(int[] items)
	{		
		
		for(int item: items)
		{		
			BufferedImage itemImage = loadImage(item);
			ImageIcon icon = new ImageIcon( itemImage.getScaledInstance(-1, 75,  java.awt.Image.SCALE_SMOOTH) );
			itemImageMap.put(item, icon);
		}
	}
	

	
	protected BufferedImage loadImage(int itemId)
	{
		BufferedImage myPicture = (BufferedImage) blackImage;
    	try
		{
    	
	    	myPicture = ImageIO.read(new File(ConfigReader.getAttribute("smallImagesFolder")+"/"+itemId+".jpg"));
			
		} catch (IOException e)
		{
		}    	
    	return myPicture;
	}

	@Override
	public void componentHidden(ComponentEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void componentMoved(ComponentEvent e) {
		// TODO Auto-generated method stubA
		
	}

	@Override
	public void componentResized(ComponentEvent e)
	{
		scroller.setPreferredSize(getSize());
	    revalidate();
	    repaint();
	}

	@Override
	public void componentShown(ComponentEvent e) {
		scroller.setPreferredSize(getSize());
	    revalidate();
	    repaint();		
	}
		
	@Override
	public void stateChanged(ChangeEvent arg0)
	{
	}
	
	
	@Override
	public void actionPerformed(ActionEvent e)
	{	
		//e.getSource().equals(categoryComboBox)
	}
	
	protected List<ConcreteItem> selectItems(int catId, int count)
	{
		DBConnection.session().beginTransaction();
		Random r = new Random();
		DBConnection.transaction();
		List<ConcreteItem> allItems = (List<ConcreteItem>) DBConnection.session().createQuery("from ConcreteItemI where category_id = "+catId).list();
		List<ConcreteItem> selectedItems = new LinkedList<ConcreteItem>();
		while(selectedItems.size()<count)
		{
			ConcreteItem itm = allItems.get(r.nextInt(allItems.size()));
			if(!selectedItems.contains(itm))	selectedItems.add(itm);
		}
		return selectedItems;
	}
	
	
	private abstract class InspectionThread implements Runnable
	{
		private int[] items;
		private int numItems;
		private int maxItems;
		private int[] blackListedItems; //Items that are already in the black list, they shouldn't be checked
		
		
		private int[] readBlackListFile()
		{
			try
			{
				//Count the number of items in the file (a little bit "cutre" but does the job
			    BufferedReader in = new BufferedReader(new FileReader(BLACKLIST_FILE));			    
			    String str;
			    int numLines = 0;
			    while ((str = in.readLine()) != null) numLines++;		
			    in.close();
			    
			    int[] items = new int[numLines];
			    in = new BufferedReader(new FileReader(BLACKLIST_FILE));	
			    int i = 0;
			    while ((str = in.readLine()) != null)items[i++]=Integer.parseInt(str);
			    in.close();
			    Arrays.sort(items);
			    return items;
			    
			} catch (IOException e) {
				e.printStackTrace();
			}
			return new int[0];
		}
		
		public InspectionThread(int itemsLimit)
		{
			maxItems = itemsLimit;
			numItems = 0;
			items = new int[maxItems];
			blackListedItems=readBlackListFile();
	
		}
		public abstract void push();
		
		public int[] pull()
		{
			int[] aux = Arrays.copyOf(items, numItems);
			numItems = 0;
			items = new int[maxItems];
			return aux;
		}
		
		public boolean isSuspicious(int iid)
		{
			
			IplImage anItemImageAux = cvLoadImage(IMAGES_SRC_PATH+iid+".jpg");		
			if(anItemImageAux ==null)return false;
			CvMat anItemImage = CvMatUtils.getCvMatFromIplImage(anItemImageAux);
			CvMat anItemMask = BackgroundExtractor.colorMask(anItemImage,CV_RGB(255,255,255),10);
			ItemProportionsExtractor extr = new ItemProportionsExtractor() {
				
				@Override
				public void printProportions(ImagePrinter printer, CvMat mask) {
					// TODO Auto-generated method stub
					
				}
				
				@Override
				public Map<Integer, Integer> getProportions(CvMat mask) {
					// TODO Auto-generated method stub
					return null;
				}
				
				@Override
				public Set<Category> getAplicableCategories() {
					// TODO Auto-generated method stub
					return null;
				}
			};
			
			int anItemTop = extr.getTop(anItemMask);
			int anItemHeight = Math.abs(extr.getBottom(anItemMask)-anItemTop);		
			
			float maxWidth = Float.MIN_VALUE;
			float minWidth = Float.MAX_VALUE;
			try
			{
				for(int i = 0; i<100; i++)
				{
					
					float widthAtPoint = extr.getWidthAtHeigth(anItemMask, i, anItemTop, anItemHeight, 1);			
					if(widthAtPoint<minWidth)minWidth=widthAtPoint;
					if(widthAtPoint>maxWidth)maxWidth=widthAtPoint;
				}			
			if((maxWidth-minWidth)<(anItemImageAux.width()*0.2f)) return true;
			//if((maxWidth-minWidth)<3) return true;
			}catch(Exception e){}
			return false;
		}
		
		@Override
		public void run()
		{
			DBConnection.transaction();
			BigInteger total = (BigInteger) DBConnection.session().createSQLQuery("SELECT count(*) from Item").list().get(0);
			ScrollableResults itemCursor =DBConnection.session().createSQLQuery("SELECT id from Item").scroll();
			
			int count=0;
			while ( itemCursor.next() )
			{
				while(numItems==maxItems)
				{
					push();
				}
				Integer iid = (Integer)itemCursor.get(0);
			    
				if(Arrays.binarySearch(blackListedItems, iid)<0 && isSuspicious(iid))
				{
					items[numItems]=iid;
					numItems++;
				}
			    if ( ++count % 100 == 0 )
			    {
			    	System.out.println(count+"/"+total);
			    }
			    
			}
		}
	}
	
}




package rob.ors.core.model.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Set;

import rob.ors.core.model.api.AbstractGarment;
import rob.ors.core.model.api.AbstractOutfit;
import rob.ors.core.model.api.ConcreteGarment;
import rob.ors.core.model.api.Garment;

import rob.ors.core.model.api.Member;


// Generated Jul 13, 2012 11:58:30 AM by Hibernate Tools 3.4.0.CR1

/**
 * Set generated by hbm2java
 */
public class ConcreteOutfitI extends OutfitI  implements java.io.Serializable, rob.ors.core.model.api.ConcreteOutfit {
	private Member member;
	private AbstractOutfit abstractOutfit;
	private java.util.Set<ConcreteGarment> garments = new HashSet<ConcreteGarment>(0);	
	private Set<Member> membersLiked = new HashSet<Member>(0);
	protected ConcreteOutfitI(){}
	

	
	public ConcreteOutfitI(Integer id, Member member)
	{
		if(id == null) throw new IllegalArgumentException("Id is null");
		this.id = id;
		this.member = member;		
		if(member != null)  member.getMemberOutfits().add(this);
	}
	
	@Override
	public void setId(Integer id)
	{
		if(id == null) throw new IllegalArgumentException("Id is null");
		this.id = id;
	}

	public void setMember(Member member)
	{
		//if(member == null) throw new IllegalArgumentException("Member is null");
		this.member = member;		
	}

	@Override
	public Member getMember()
	{	
		return this.member;
	}	
	
	@Override
	public AbstractOutfit getAbstractOutfit()
	{
		return this.abstractOutfit;
	}

	/**
	 * Only for hibernate use with reflection
	 * @param abstractOutfit
	 */
	private void setAbstractOutfit(AbstractOutfit abstractOutfit)
	{
		if(this.abstractOutfit != null)
		{
			this.abstractOutfit.getOutfits().remove(this);
		}
		this.abstractOutfit = abstractOutfit;				
		if(abstractOutfit == null) return;
	
		//abstractOutfit.getOutfits().add(this);
		
	}

	@Override
	public void setAbstractoutfit(AbstractOutfit abstractOutfit) {
		if(this.abstractOutfit!=null) this.abstractOutfit.getOutfits().remove(this);
		this.abstractOutfit = abstractOutfit;		
		if(abstractOutfit == null) return;
		abstractOutfit.getOutfits().add(this);
	}	

	@Override
	public void addGarment(ConcreteGarment garment) {
		if(garment == null) throw new IllegalArgumentException("garment is null");	
		this.garments.add(garment);
		//garment.getOutfits().add(this);		
	}
	
	@Override
	public void removeGarment(ConcreteGarment garment)
	{
		if(garment == null) throw new IllegalArgumentException("garment is null");	
		this.garments.remove(garment);
		garment.getOutfits().remove(this);
	}
	
	@Override
	public java.util.Set<ConcreteGarment> getGarments() {
		return garments;
	}	
	
	private void setGarments(java.util.Set<ConcreteGarment> garments) {
		this.garments = garments;
	}

	
	@Override
	public Set<Member> getMembersLiked() {
		return membersLiked;
	}
	

	private void setMembersLiked(Set<Member> membersLiked) {
		this.membersLiked = membersLiked;
	}

	@Override
	public void addMemberLiked(Member member) {
		if(member==null) throw new IllegalArgumentException("Member is null");
		this.membersLiked.add(member);
		member.getLikedOutfits().add(this);				
	}

	
	
}

package rob.crs.informationGathering.visualitzation;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.InputMethodEvent;
import java.awt.event.InputMethodListener;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.googlecode.javacv.cpp.opencv_core.CvScalar;

import rob.crs.core.model.api.AbstractItem;
import rob.crs.core.model.api.AbstractSet;
import rob.crs.core.model.api.Category;
import rob.crs.core.model.api.ConcreteItem;
import rob.crs.core.model.api.ConcreteSet;
import rob.crs.core.model.api.DBConnection;
import rob.crs.core.polyvore.PolyvoreCategoryTree;
import rob.crs.imgfeaturesextraction.FeaturesExtractor;
import rob.crs.imgfeaturesextraction.ItemsComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.ColorComparator;
import rob.crs.imgfeaturesextraction.imageProcessing.CvMatUtils;
import weka.core.Attribute;

public class PatchCompareItemsPanel extends ItemsPanel implements ComponentListener, ChangeListener, ActionListener{
	private int patchSize = 10;
	JButton go;
	JTextField patchSizeField;

	private void computeDistance()
	{
		if(patchSize==0)patchSize=10;//The first time, this function is called prior to ending the contrsuction of the PatchComPanel class, so patchSize is 0
		tuples.clear();
		for(ConcreteItem item: items)
		{
			int sim = (int)ItemsComparator.patchDistance(item.getId(),referencieItemId,patchSize)*100;
			tuples.add(new Integer[]{item.getId(),sim});
		}
		tuples.add(new Integer[]{items.get(0).getId(),0});
	}
	
	public PatchCompareItemsPanel(int itemsCount)
	{	
		
		super(itemsCount);
		patchSize = 10;
		computeDistance();
		go = new JButton("Go");
		add(go);
		go.addActionListener(this);
		patchSizeField = new JTextField(new Integer(patchSize).toString());
		add(new JLabel("Tolerance"));
		add(patchSizeField);
		
		updateItemsPanel();
	}
	

	@Override
	public void stateChanged(ChangeEvent arg0) {

	}


	@Override
	public void actionPerformed(ActionEvent arg0) {
		if(arg0.getSource().equals(go))
		{
			patchSize = Integer.parseInt(patchSizeField.getText());
			computeDistance();
			updateItemsPanel();
		}else(super.actionPerformed(arg0);)

		
		
	}

	@Override
	protected void changeReferenceItem() {
		computeDistance();
		updateItemsPanel();
		
		
	}

	@Override
	protected void itemsChanged() {
		computeDistance();
		
	}
}


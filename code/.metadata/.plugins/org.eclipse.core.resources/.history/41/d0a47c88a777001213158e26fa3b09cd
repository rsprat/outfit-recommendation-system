package descProcess;


import java.awt.Point;
import java.io.File;
import java.util.*;

import org.hibernate.metamodel.relational.Tuple;
import org.junit.experimental.max.MaxCore;

import rob.crs.core.config.ConfigReader;
import rob.crs.core.model.api.Item;
import rob.crs.informationGathering.CSVReader.ItemsCSVReader;

public class DescriptionProcessor {
	
	public void processDescriptions(LinkedList<Item> items)
	{
		
	}
	public static Map<String,Integer> merge(List<Map<String,Integer>> maps)
	{
		Map<String,Integer> expressions = new HashMap<String,Integer>();
		for(Map<String,Integer> itemExpressions:maps)
		{			
			for(String expression:itemExpressions.keySet())
			{
				if(expressions.containsKey(expression))
					expressions.put(expression,expressions.get(expression)+itemExpressions.get(expression));
				else
					expressions.put(expression,itemExpressions.get(expression));
			}
		}
		return expressions;
	}
	
	public static Map<String,Integer> countExpressions(List<Item> items, int expressionLen)
	{

		LinkedList<Map<String,Integer>> expressions = new LinkedList<Map<String,Integer>> ();		
		for(Item item:items)		
			expressions.push(countExpressions(item,expressionLen));		
		return merge(expressions);
	}
	
	private static String concatenate(String[] in)
	{
		String out ="";
		for(int i=0;i<in.length-1;i++)out+=in[i]+" ";
		out+=in[in.length-1];
		return out;		
	}
	
	public static Map<String,Integer> countExpressions(Item item,int expressionLen)
	{
		Map<String,Integer> expressions = new HashMap<String,Integer>();
		//System.out.println(item.getDescription());
		String[] desc = item.getDescription().split(" ");
		
		for(int i=0;i<desc.length;i++)
		{
			String expr = concatenate(Arrays.copyOfRange(desc, i, Math.min(i+expressionLen, desc.length)));
			if(expressions.containsKey(expr))			
				expressions.put(expr, expressions.get(expr)+1);
			else
				expressions.put(expr, 1);			
		}		
		//printExpressions(expressions,1);
		return expressions;
	}
	
	public static void printExpressions(Map<String,Integer> expressions,int numItems)
	{
		LinkedList<Object[]> list = new LinkedList<Object[]>();
		for(String expression:expressions.keySet()) list.add(new Object[]{expression,expressions.get(expression)});
		
		Collections.sort(list, new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {				
				return ((Integer)((Object[])o1)[1])-((Integer)((Object[])o2)[1]);
			}
		});
		float factor = 100.0f/numItems;
		
		for(Object[] obj:list)
		{
			System.out.println(obj[0]+"=>"+(((Integer)obj[1]).floatValue()/factor));
		}
	}
	
	public static void main(String[] args)
	{
		ItemsCSVReader reader = new ItemsCSVReader();
		
		List<Item> items =new LinkedList<Item>(reader.parseFile("E://MyDocuments//get-dressed//code//dataRetrival//captured//items.txt"));
		LinkedList<	Map<String,Integer>> expressions = new LinkedList<	Map<String,Integer>>();
		for(int i=1;i<=4;i++)
			expressions.push(countExpressions(items,i));
		
		expressions.clear();
		Map<String,Integer> expr = merge(expressions);
		printExpressions(expr,items.size());		
		
	}
	

}
